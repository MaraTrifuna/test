!https://github.com/tinkerpop/rexster/raw/master/doc/images/rexster-logo.png!:http://rexster.tinkerpop.com

"Rexster":http://rexster.tinkerpop.com exposes any Titan graph database via a JSON-based REST interface. In this way, the raw graph's vertices and edges can be referenced using REST endpoints. Moreover, provided and custom algorithms (called "Kibbles":https://github.com/tinkerpop/rexster/wiki/Rexster-Kibbles) can be stored on the server, triggered via HTTP, and their results returned via JSON. Finally, Rexster provides an administration and visualization interface that can be accessed from most major web browsers.

Titan includes a light-weight version of Rexster as the [[Titan Server]] which is easier to setup and provides better performance than the full Rexster server. However, [[Titan Server]] only supports Gremlin queries and does not provide a REST interface.

h2. The Benefits of Rexster

<a href="https://github.com/tinkerpop/rexster/raw/master/doc/images/rexster-dog-house-viz.png">[[https://github.com/tinkerpop/rexster/raw/master/doc/images/rexster-dog-house-viz.png|width=434px]]</a><a href="https://github.com/tinkerpop/rexster/raw/master/doc/images/rexster-dog-house-gremlin.png">[[https://github.com/tinkerpop/rexster/raw/master/doc/images/rexster-dog-house-gremlin.png|width=450px]]</a>

The following is a list of the "benefits of using Rexster":https://github.com/tinkerpop/rexster/wiki/The-Benefits-of-Rexster.

* "JSON-based REST interface":https://github.com/tinkerpop/rexster/wiki/Mapping-a-URI-to-JSON ensures language agnostic connectivity to Titan.
** See "Bulbs":http://bulbflow.com/ for a Python connector.
* HTML/JavaScript "graphical user interface":https://github.com/tinkerpop/rexster/wiki/The-Dog-House for graph administration and visualization.
* Extend with more RESTful endpoints by adding "kibbles":https://github.com/tinkerpop/rexster/wiki/Creating-an-Extension to Rexster.
** See "Rexster-Kibbles":https://github.com/tinkerpop/rexster/wiki/Rexster-Kibbles provided by TinkerPop.
* Remote Gremlin traversals via the "Gremlin extensions":https://github.com/tinkerpop/rexster/wiki/Gremlin-Extension and the "Rexster console":https://github.com/tinkerpop/rexster/wiki/Rexster-Console.
* "Security support":https://github.com/tinkerpop/rexster/wiki/Rexster-Security via user authentification.

h2. Downloading and Starting Rexster

Before using Rexster with Titan, it must for be downloaded. Rexster can be downloaded at "this location":https://github.com/tinkerpop/rexster/wiki/Downloads. Below is a snippet of shell commands that demonstrate the process for getting Rexster downloaded and started using a default configuration.

```bash
$ curl -O -L http://tinkerpop.com/downloads/rexster/rexster-server-x.y.z.zip > rexster-server-x.y.z.zip
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current ...
...
$ unzip rexster-server-x.y.z.zip
Archive:  rexster-server-x.y.z.zip
   creating: rexster-server-x.y.z/
...
$ cd rexster-server-x.y.z
$ ./rexster-server.sh --start
```

You can validate that it is working by opening a browser and navigating to @http://localhost:8182@ which should present a Rexster landing page with links to the root of the REST API and to the Dog House.

Use @CTRL-C@ to kill the server. Now that Rexster is downloaded and verified to be working, it is necessary to configure Rexster to work with Titan.

h2. Configuring Rexster

This section explains how to configure Rexster to use a Titan graph database (see also Rexster's "Getting Started":https://github.com/tinkerpop/rexster/wiki/Getting-Started page). 

_PREREQUISITE:_ These instructions assume that a graph has been created in Titan as described in the "Loading Data Into Titan" section of the [[Getting Started]] page. 

Edit the @REXSTER_HOME/rexster.xml@ and include the Titan configuration portion in the @graphs@ section (see "Rexster Configuration":https://github.com/tinkerpop/rexster/wiki/Rexster-Configuration).

```xml
<?xml version="1.0" encoding="UTF-8"?>
<rexster>
  ...
  <graphs>
    <graph>
      <graph-name>titanexample</graph-name>
      <graph-type>com.thinkaurelius.titan.tinkerpop.rexster.TitanGraphConfiguration</graph-type>
      <graph-location>/tmp/titan</graph-location>
      <graph-read-only>false</graph-read-only>
      <properties>
            <storage.backend>local</storage.backend>
            <buffer-size>100</buffer-size>
      </properties>
      <extensions>
        <allows>
          <allow>tp:gremlin</allow>
        </allows>
      </extensions>
    </graph>
  </graphs>
</rexster>
```

[[https://github.com/tinkerpop/rexster/raw/master/doc/images/rexster-character-2.png|align=right|float|width=100px]]

Rexster's _graph-location_ option is equivalent to Titan's _storage.directory_. In the event that Titan is being configured for "local" mode, please make sure that this value is an existing directory.  All other Titan specific configurations are subsumed under _properties_. In the example above, the backend and the buffer size are configured. Any of the "Titan configurations":Graph-Configuration can be used here.

Rexster needs to have Titan and its related library dependencies made available to it.  Rexster has an @ext@ directory where "extensions":https://github.com/tinkerpop/rexster/wiki/Extensions and other related libraries can be put on Rexster's path for "deployment":https://github.com/tinkerpop/rexster/wiki/Deploying-an-Extension.  All files in the root of that directory and sub-directories will be added to Rexster's classpath.

To add Titan to Rexster, first make a directory as in:

```text
mkdir REXSTER_HOME/ext/titan
```

Then, if building Titan from source:

```text
cp TITAN_HOME/target/titan-x.y.z-standalone/lib/*.* REXSTER_HOME/ext/titan
```

or, if using the Titan zipped distribution download:

```text
cp TITAN_HOME/lib/*.* REXSTER_HOME/ext/titan
```

*NOTE*: Future releases (beyond the 0.2) will have a much more efficient/easier packaging model.

Start Rexster with:

```text
rexster$ bin/rexster.sh -s -c rexster.xml
```

Access the Titan graph at the following URI:

```text
http://localhost:8182/graphs/titanexample
```

h2. Limitations

Rexster has a rich "API":https://github.com/tinkerpop/rexster/wiki/Basic-REST-API for working with Blueprints Graph implementations, but there are some limitations to consider when using Rexster with Titan:

* Titan automatically assigns identifiers. Hence, the POST of an edge cannot be done with an identifier. In other words, POST to this: @http://localhost/graphs/titan/edges@ and _not_ to this @http://localhost/graphs/titan/edges/1234@.
* Titan uses key indices and does not support manual indices. Hence, all operations on the @indices@ resource are not supported. Use key indexes instead.
* Depending on Titan's configured backend, there may be limitations in the usage of Dog House.  Titan does not support iterating edges and vertices (except when used with BerkleyDB) and therefore many functions will not be available that require those REST API calls.