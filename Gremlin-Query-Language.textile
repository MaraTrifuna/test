!https://github.com/tinkerpop/gremlin/raw/master/doc/images/gremlin-logo.png!

Titan supports the standard "Gremlin":http://gremlin.tinkerpop.com graph query language for complex graph traversal and mutation operations. Gremlin is a "functional language":http://en.wikipedia.org/wiki/Functional_programming whereby traversal operators are chained together to form path-like expressions. For example, "from Hercules, traverse to his father and then his father's father and return the the grandfather's name." 

This section of documentation will only briefly overview Gremlin. For more complete documentation on Gremlin, please see the "online documentation":http://gremlin.tinkerpop.com. Moreover, the examples are with respects to Gremlin-Groovy and note that there are other "JVM language implementations":https://github.com/tinkerpop/gremlin/wiki/JVM-Language-Implementations of Gremlin.

h2. Traversing using Functions

When working with Gremlin, it is important to realize the query as a chain of operations/functions that are read from left to right. A simple grandfather query is provided below over the _Graph of the Gods_ "dataset":https://github.com/thinkaurelius/titan/raw/master/doc/images/graph-of-the-gods.png.

```text
gremlin> g.V('name','hercules').out('father').out('father').name
==>saturn
```

The query above can be read:
  # @g@: for the current graph.
  # @V('name','hercules')@: get all vertices with name property "hercules" (there is only one).
  # @out('father')@: traverse out going father edge's from the "hercules" vertex.
  # @out('father')@: traverse out going father edges's from "hercules" father vertex.
  # @name@: get the name property of the "hercules" vertex's grandfather.


The example below returns the name of all the people that have battled the same monsters as Hercules who themselves are not Hercules (i.e. "co-battlers" or perhaps, "allies").

```text
hercules.out('battled').in('battled').except([hercules]).name
```

The example above has 4 chained functions: @out@, @in@, @except@, and @property@ (i.e. @name@ is shorthand for @property('name')@). The function signatures of each are itemized below, where @V@ is vertex and @U@ is any object. 

  # @out: V -> V@
  # @in: V -> V@
  # @except: U -> U@
  # @property: V -> U@

When chaining together functions, the incoming type must match the outgoing type, where @U@ matches anything. Thus, the "co-battled/ally" traversal above is correct.

h2. Helper Configuration Files for Easy Local Connectivity

When working with Gremlin against a local instance of [[HBase|Using HBase]] or [[Cassandra|Using Cassandra]], the following behavior is constantly repeated. 

```java
conf = new BaseConfiguration();
conf.setProperty("storage.backend","cassandra");
conf.setProperty("storage.hostname","127.0.0.1");
```

To make this easier, there are two configuration files in the @bin/@ directory: @cassandra.local@ and @hbase.local@. These can be used as such:

```java
TitanFactory.open("bin/cassandra.local")
```

or

```java
TitanFactory.open("bin/hbase.local")
```

h2. Next Steps

* Read the "Gremlin Manual":http://gremlin.tinkerpop.com to learn more about this expressive query language.
* Learn about the [[Rexster Graph Server]] that exposes any Titan graph through a RESTful interface.