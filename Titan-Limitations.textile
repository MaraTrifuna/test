[[https://github.com/thinkaurelius/titan/raw/master/doc/images/titan-head.png|float|align=left]] There are various limitations and "gotchas" that one should be aware of when using Titan. Some of these limitations are necessary design choices and others are issues that will be rectified as Titan development continues.

<br/><br/><br/><br/>

h2. Design Limitations

h3. Size Limitation

Titan can store up to a quintillion edges (2^60) and half as many vertices. That limitation is imposed by Titan's id scheme.

h3. Transactional Scope

Titan strictly enforces the transactional scope, which means that all elements associated with a transaction become unavailable when that transaction is stopped. To learn how to refresh elements, read more on [[Transaction Handling]].

h3. DataType Definitions

When declaring the data type of a property key using @dataType(Class)@ Titan will enforce that all properties for that key have the declared type, unless that type is @Object.class@. This is an equality type check, meaning that sub-classes will not be allowed. For instance, one cannot declare the data type to be @Number.class@ and use @Integer@ or @Long@. For efficiency reasons, the type needs to match exactly. Hence, you @Object.class@ as the data type for type flexibility. In all other cases, declare the actual data type to benefit from increased performance and type safety.

h2. Temporary Limitations

h3. Key Index Must Be Created Prior to Key Being Used

To index vertices by key, the respective key index must be created before the key is first used in a vertex property. Read more about creating [[vertex indexes|Blueprints Interface]].

h3. Unable to Drop Key Indices

Once an index has been created for a key, it can never be removed. 

h3. Types Can Not Be Changed Once Created

This pitfall constrains the graph schema. While the graph schema can be extended, previous declarations cannot be changed. 

h3. Batch Loading Speed

Titan provides a batch loading mode that can be enabled through the "configuration":Graph-Configuration. However, this batch mode only facilitates faster loading into the storage backend, it does not use storage backend specific batch loading techniques that prepare the data in memory for disk storage. As such, batch loading in Titan is currently slower than batch loading modes provided by single machine databases.

Another limitation related to batch loading is the failure to load millions of edges into a single vertex at once or in a short time of period. Such _supernode loading_ can fail for some storage backends. This limitation also applies to dense index entries. For more information, please refer to "the ticket":https://github.com/thinkaurelius/titan/issues/11

h2. Beware

h3. Custom Class Datatype

Titan supports arbitrary objects as attribute values on properties. However, when using a custom class as data type it is important to either configure a custom serializer or ensure that the default serializer can successfully handle these objects. Please read [[Datatype and Attribute Serializer Configuration]] for more information.

h3. Global Graph Operations

Since version 0.2.1, Titan supports global graph operations for all storage backends. However, beware that such operations will likely cause @OutOfMemoryException@ for large graphs since all vertices and/or edges can be loaded into memory by iterating through them.  Use "Faunus":http://thinkaurelius.github.com/faunus/ to implement global graph operations on large, distributed Titan graphs that do not fit into memory.

h3. Snappy 1.4 does not work with Java 1.7

Cassandra 1.2.x makes use of Snappy 1.4. Titan will not be able to connect to Cassandra if the server is running Java 1.7 and Cassandra 1.2.x (with Snappy 1.4). Be sure to remove the Snappy 1.4 jar in the @cassandra/lib@ directory and replace with a Snappy 1.5 jar version ("available here":http://code.google.com/p/snappy-java/downloads/list).

