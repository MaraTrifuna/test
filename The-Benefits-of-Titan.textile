Titan is designed to support the processing of graphs so large that they require storage and computational capacities beyond what a single machine can provide. This is Titan's foundational benefit. The following list itemizes other Titan benefits. Features that are inherited from the underlying storage layer are discussed in their respective sections.

h2. General Titan Benefits

[[https://github.com/thinkaurelius/titan/raw/master/doc/images/titan-kneeling.png|width=150px|align=left|float]] 

* Support for an "infinite" sized graph via the addition of machines to the cluster.
* Support for an "unlimited" number of concurrent transactions via the addition of machines to the cluster.
* Native support for the popular property graph data model exposed by Blueprints.
* Native support for the graph traversal language Gremlin.
* Easy integration with the Rexster graph server for programming language agnostic connectivity.
* Numerous graph-level configurations provide knobs for tuning performance.
* Vertex-centric indices provide vertex-level querying to alleviate issues with the infamous super node problem.
* Provides an optimized disk representation to allow for efficient use of storage and speed of access.
* Open source under the liberal Apache 2 license.

<br/><br/><br/>

h2. Benefits of Titan with Cassandra

!http://cassandra.apache.org/media/img/cassandra_logo.png!:http://cassandra.apache.org/

* Continuously available with no single point of failure.
* No read/write bottlenecks to the graph as there is no master/slave architecture.
* Elastic scalability allows for the introduction and removal of machines.
* Caching layer ensures that continuously accessed data is available in memory.
* Increase the size of the cache by adding more machines to the cluster.

h2. Benefits of Titan with HBase

!http://hbase.apache.org/images/hbase_logo.png!:http://hbase.apache.org/

* Tight integration with the Hadoop ecosystem.
* Native support for strong consistency.
* Linear scalability with the addition of more machines.
* Strictly consistent reads and writes.
* Convenient base classes for backing Hadoop MapReduce jobs with HBase tables.
* Support for exporting metrics via JMX.