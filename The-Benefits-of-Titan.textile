Titan is designed to support the processing of graphs so large that they can not fit within the storage and computational capacities of a single machine. Beyond this foundational feature, the following list itemizes various other Titan benefits. Features that are inherited from the underlying storage layer are discussed in their respective sections.

h2. General Titan Benefits

[[https://github.com/thinkaurelius/titan/raw/master/doc/images/titan-kneeling.png|width=150px|align=left|float]] 

* Support for "infinite" sized graphs via the addition of machines to the cluster.
* Native support for the popular property graph data model exposed by Blueprints.
* Native support for the graph traversal language Gremlin.
* Numerous graph-level configurations provide knobs for tuning performance.
* Micro-indices facilitate intelligent vertex-level querying to alleviate issues with the infamous super node problem.
* Provides an optimized disk representation to allow for efficient use of storage and speed of access.
* Data replication amongst the cluster ensures data is protected during machine failures.
* Support for top-down, user prescribed graph partitioning algorithms.


h2. Benefits of Titan over Cassandra

!http://cassandra.apache.org/media/img/cassandra_logo.png!:http://cassandra.apache.org/

* Continuously available with no single point of failure.
* No read/write bottlenecks to the graph as there is no master/slave architecture.
* Elastic scalability allows for the introduction and removal of machines.
* Caching layer ensures that continuously accessed data is available in memory.
* Increase the size of the cache by adding more machines to the cluster.

h2. Benefits of Titan over HBase

!http://hbase.apache.org/images/hbase_logo.png!:http://hbase.apache.org/

* Tight integration with the Hadoop ecosystem.
* Native support for strong consistency.