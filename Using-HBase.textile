!http://hbase.apache.org/images/hbase_logo.png!:http://hbase.apache.org/

bq. HBase is the Hadoop database. Think of it as a distributed, scalable, big data store. Use HBase when you need random, realtime read/write access to your Big Data. This project's goal is the hosting of very large tables -- billions of rows X millions of columns -- atop clusters of commodity hardware. HBase is an open-source, distributed, versioned, column-oriented store modeled after Google's Bigtable. Just as Bigtable leverages the distributed data storage provided by the Google File System, HBase provides Bigtable-like capabilities on top of Hadoop and HDFS. -- "Apache HBase Homepage":http://hbase.apache.org/

h2. Deploying on Managed Machines

The following sections outline the various ways in which Titan can be used in concert with HBase.

h3. Using Local Server Mode

!https://github.com/thinkaurelius/titan/raw/master/doc/images/titan-modes-local.png!

h3. Using Remote Server Mode

!https://github.com/thinkaurelius/titan/raw/master/doc/images/titan-modes-distributed.png!

h3. Using Remote Server Mode with Rexster

!https://github.com/thinkaurelius/titan/raw/master/doc/images/titan-modes-rexster.png!

h2. Deploying on Amazon EC2

!http://cdn001.practicalclouds.com/user-content/1_Dave%20McCormick//logos/Amazon%20AWS%20plus%20EC2%20logo_scaled.png!:http://aws.amazon.com/ec2/

"Amazon EC2":http://aws.amazon.com/ec2/ is a cloud computing service.

The following first launch a four-node HBase cluster on EC2 via [[Whirr|http://whirr.apache.org/]], then run a basic Titan test case using the cluster.

* Whirr's current stable version, 0.7.1, sometimes fails when run on a machine behind a NAT ([[WHIRR-459|https://issues.apache.org/jira/browse/WHIRR-459]]).  Login to a machine with a public IP or create and login to a micro instance on EC2 before running the following commands.
* <pre>export AWS_ACCESS_KEY_ID=...</pre>
* <pre>export AWS_SECRET_ACCESS_KEY=...</pre>
* <pre>curl -O [[http://www.apache.org/dist/whirr/whirr-0.7.1/whirr-0.7.1.tar.gz]]</pre>
* <pre>tar zxf whirr-0.7.1.tar.gz; cd whirr-0.7.1</pre>
* <pre>ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa_whirr</pre>
* <pre>curl -O [[https://github.com/downloads/thinkaurelius/titan/hbase-ec2-0.92.1.properties]]</pre>
* <pre>bin/whirr launch-cluster --config recipes/hbase-ec2-0.92.1.properties --private-key-file ~/.ssh/id_rsa_whirr</pre>
* run a simple health check on the hbase-master node (this should print "imok"): <pre>echo "ruok" | nc $(awk '{print $3}' ~/.whirr/hbase-0.92.1/instances | head -1) 2181; echo</pre>  
* login into the first node created, the hbase-master node:
  <pre>ssh -i ~/.ssh/id_rsa_whirr \
       -o "UserKnownHostsFile /dev/null" \
       -o StrictHostKeyChecking=no \
       `grep hbase-master ~/.whirr/hbase-0.92.1/instances | awk '{print $3}'`</pre>
* <pre>sudo apt-get install git-core maven2</pre>
* <pre>git clone 'git@github.com:thinkaurelius/titan.git'</pre>
* <pre>cd titan</pre>
* <pre>mvn test -Dtest=ExternalHBaseGraphPerformanceTest#unlabeledEdgeInsertion</pre>

h2. Testing Titan's HBase Adapter (for Developers)

Titan's HBase backend tests currently assume the existence of a running, locally-available HBase instance with an essentially default configuration.  These tests will fail otherwise.  Here are the steps to start a testing HBase instance on a development machine and run the relevant tests.

The assumption of an externally-started HBase instance will likely be removed as development on the Titan HBase adapter continues.

* Download and extract a stable HBase from [[http://www.apache.org/dyn/closer.cgi/hbase/stable/]].
* Start HBase.  In 0.92.1, the stable version as of this writing, the startup command on OS X or Linux is @hbase-0.92.1/bin/start-hbase.sh@.
* Clone Titan.
<pre>git@github.com:thinkaurelius/titan.git
cd titan</pre>
* Run the HBase tests.  On a machine with the @mvn@ command-line Maven client installed,
<pre>mvn clean test -Dtest=ExternalHBaseKeyColumnValueTest
mvn clean test -Dtest=ExternalHBaseGraphDBTest</pre>

h2. Disclaimer

The Titan HBase adapter is still experimental and not fully performance optimized. Additionally, HBase deserializes entire rows which leads to Titan performance degradation on super nodes.