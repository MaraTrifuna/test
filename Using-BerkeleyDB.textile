<a href="http://www.oracle.com/technetwork/products/berkeleydb">[[http://sepp.oetiker.ch/subversion-1.4.4-rp/images/Oracle_BerkeleyDB_clr.bmp|width=300px|align=left|float]]</a>

The "Oracle BerkeleyDB":http://www.oracle.com/technetwork/products/berkeleydb storage backend runs in the same JVM as Titan and provides local persistence on a single machine. Hence, the BerkeleyDB storage backend requires that all of the graph data fits on the local disk and all of the frequently accessed graph elements fit into main memory. This imposes a practical limitation of graphs with 10-100s million vertices on commodity hardware. However, for graphs of that size the BerkeleyDB storage backend exhibits high performance because all data can be accessed locally within the same JVM.

bq. Berkeley DB enables the development of custom data management solutions, without the overhead traditionally associated with such custom projects. Berkeley DB provides a collection of well-proven building-block technologies that can be configured to address any application need from the hand-held device to the datacenter, from a local storage solution to a world-wide distributed one, from kilobytes to petabytes. -- "BerkeleyDB Homepage":http://www.oracle.com/technetwork/products/berkeleydb

h2. Running Titan in Single Machine Mode

Titan was primary developed to be used for multi-machine, distributed graph storage and processing. However, to address all aspects of the "CAP Theorem":http://en.wikipedia.org/wiki/CAP_theorem (see the final section of [[The Benefits of Titan]]), Titan provides out-of-the-box connectivity to BerkeleyDB. The simplest way to get Titan/BerekleyDB running is to point Titan to a local directory.

```java
TitanGraph graph = TitanFactory.open("/tmp/graph")
```

If the directory doesn't exist, then a new directory is created with an empty graph. If the directory already exists, then the graph data stored in that directory is loaded.

Titan/BerkeleyDB can also make use of a @Configuration@ object.

```java
Configuration conf = new BaseConfiguration();
conf.setProperty("storage.directory", "/tmp/graph")
conf.setProperty("storage.backend", "local")
conf.setProperty("storage.cache_percentage", 60)
TitanGraph graph = TitanFactory.open(conf);
```

Titan/BerkeleyDB has all the properties of a Titan graph database in that it can handle multiple concurrent transactions.

h2. The Size of the Graph

Titan/BerkeleyDB has been tested at ranges in the 100s of millions of edges and the 10s of millions of vertices with consistent performance. Please feel free to add information to this section for other larger graphs being processed using Titan/BerkeleyDB.