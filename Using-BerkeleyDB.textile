<a href="http://www.oracle.com/technetwork/products/berkeleydb">[[http://sepp.oetiker.ch/subversion-1.4.4-rp/images/Oracle_BerkeleyDB_clr.bmp|width=300px]]</a>

bq. Berkeley DB enables the development of custom data management solutions, without the overhead traditionally associated with such custom projects. Berkeley DB provides a collection of well-proven building-block technologies that can be configured to address any application need from the hand-held device to the datacenter, from a local storage solution to a world-wide distributed one, from kilobytes to petabytes. -- "BerkeleyDB Homepage":http://www.oracle.com/technetwork/products/berkeleydb

h2. Running Titan in Single Machine Mode

Titan's primary intended use is for multi-machine graph environments. However, to address all aspects of the CAP Theorem, Titan provides connectivity to BerkeleyDB. The most simple way to get a Titan/BerekleyDB instance going is to point Titan to a local directory.

```java
TitanGraph graph = TitanFactory.open('/tmp/graph')
```

If the directory doesn't exist, then a new directory is created with an empty graph. If the directory already exists, then the graph data stored in that directory is loaded.

Titan/BerkeleyDB can also make use of a @Configuration@ object.

```java
Configuration conf = new BaseConfiguration();
conf.setProperty('storage.directory', '/tmp/graph')
conf.setProperty('storage.backend','local')
conf.setProperty('storage.cache_percentage', 60)
TitanGraph g = TitanFactory.open(conf);
```

h2. The Size of the Graph

Titan/BerkeleyDB has been tested at ranges in the 100s of millions of edges and the 10s of millions of vertices with solid performance. Please feel free to add information to this section for other graphs being processed using Titan/BerkeleyDB.