!http://cassandra.apache.org/media/img/cassandra_logo.png!:http://cassandra.apache.org/

bq. The Apache Cassandra database is the right choice when you need scalability and high availability without compromising performance. Linear scalability and proven fault-tolerance on commodity hardware or cloud infrastructure make it the perfect platform for mission-critical data. Cassandra's support for replicating across multiple datacenters is best-in-class, providing lower latency for your users and the peace of mind of knowing that you can survive regional outages. The largest known Cassandra cluster has over 300 TB of data in over 400 machines. -- "Apache Cassandra Homepage":http://cassandra.apache.org/

h2. Deploying on Managed Machines

The following sections outline the various ways in which Titan can be used in concert with Cassandra.

h3. Using Local Server Mode

!https://github.com/thinkaurelius/titan/raw/master/doc/images/titan-modes-local.png!

Cassandra can be run as a standalone database on the same local host as Titan and the end-user application. In this model, Titan and Cassandra communicate with one another via a @localhost@ socket. Running Titan over Cassandra requires the following setup steps:

# "Download":http://cassandra.apache.org/download/, unpack, and "setup":http://wiki.apache.org/cassandra/GettingStarted Cassandra on your local machine.
# Start Cassandra by invoking @bin/cassandra -f@ on the command line in the directory where Cassandra was unpacked. Ensure that Cassandra started successfully.

Now, you can create a Cassandra TitanGraph as follows:

```java
Configuration conf = new BaseConfiguration();
conf.setProperty("storage.backend","cassandra");
conf.setProperty("storage.hostname","127.0.0.1");
TitanGraph g = TitanFactory.open(conf);
```

h3. Using Remote Server Mode

!https://github.com/thinkaurelius/titan/raw/master/doc/images/titan-modes-distributed.png!

When the graph needs to scale beyond the confines of a single machine, then Cassandra and Titan are logically separated into different machines. In this model, the Cassandra cluster maintains the graph representation and any number of Titan instances maintain socket-based read/write access to the Cassandra cluster. The end-user application can directly interact with Titan within the same JVM as Titan.

For example, suppose we have a running Cassandra cluster where one of the machines has the IP address 77.77.77.77, then connecting Titan with the cluster is accomplished as follows:

```java
Configuration conf = new BaseConfiguration();
conf.setProperty("storage.backend","cassandra");
conf.setProperty("storage.hostname","77.77.77.77");
TitanGraph g = TitanFactory.open(conf);
```

h3. Using Remote Server Mode with Rexster

!https://github.com/thinkaurelius/titan/raw/master/doc/images/titan-modes-rexster.png!

Finally, Rexster can be wrapped around each Titan instance defined in the previous subsection. In this way, the end-user application need not be a Java-based application as it can communicate with Rexster over REST. This type of deployment is great for polyglot architectures where various components written in different languages need to reference and compute on the graph.

```text
http://rexster.titan.machine1/mygraph/vertices/1
http://rexster.titan.machine2/mygraph/tp/gremlin?script=g.v(1).out('follows').out('created')
```

h2. Deploying on Amazon EC2

!http://cdn001.practicalclouds.com/user-content/1_Dave%20McCormick//logos/Amazon%20AWS%20plus%20EC2%20logo_scaled.png!:http://aws.amazon.com/ec2/

"Amazon EC2":http://aws.amazon.com/ec2/ is a cloud computing service...