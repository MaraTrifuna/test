[[https://github.com/thinkaurelius/titan/raw/master/doc/images/titan_configuration.gif|width=200px|align=left|float]]

This page summarizes Titan's configurations options. To configure a @TitanGraph@ invoke the @TitanFactory.open()@ method with a "commons configuration":http://commons.apache.org/configuration/ object or the file name of a properties configuration file. The @TitanFactory@ will return a @TitanGraph@ according to the configuration.

The following example opens a @TitanGraph@ with the configured storage directory.
```java
Configuration conf = new BaseConfiguration();
conf.setProperty("storage.directory","/tmp/titan");
TitanGraph g = TitanFactory.open(conf);
```
Alternatively, we could have written the configuration into a properties file and opened a @TitanGraph@ as follows
```java
TitanGraph g = TitanFactory.open("/tmp/titan/configuration.properties");
```

It is very important to note that some configuration options should *NEVER* be modified after the @TitanGraph@ is first initialized. Doing so may corrupt the graph or lead to unexpected behavior. The _modifiable_ column indicates whether a particular configuration option can be changed after the graph has been created.

h2. Storage Configuration

Titan can uses storage backends for persistence. Use the following options to configure one of the pre-defined storage backends or your own.
Particular storage backends may provide or require additional configuration options. For more information on how to configure a @TitanGraph@ over "Cassandra":Using-Cassandra or "HBase":Using-HBase check out the respective wiki pages.

|_. Option |_. Description |_. Value |_. Default |_. Modifiable |
| storage.backend | Full class name of the @StorageManager@ implementation defining the storage backend to be used for persistence or one of the following pre-defined storage backends: *cassandra*, *hbase*, *local* | Class name or pre-defined short-hand | *local* | no |
| storage.directory | Storage directory for those storage backends that require local storage | path | - | no |
| storage.read-only | Specifies whether write operations are supported on the graph | _true_ or _false_ | _false_ | yes |
| storage.batch-loading | Enables batch loading which improves write performance but assumes that only one thread is interacting with the graph and that vertices retrieved by id exist. Under these assumptions locking and some read operations can be avoided. Furthermore, the configured storage backend will make backend specific configurations that facilitate loading performance. *Be careful:* enabling batch loading when the assumptions are violated can result in an inconsistent or partially corrupt graph. | _true_ or _false_ | _false_ | yes |
| storage.transactions | Enables transactions on storage backends that support them | _true_ or _false_ | _false_ | yes |

h2. Persistence Configuration

These configuration options modify the persistence behavior of Titan independent of the configured storage backend.

|_. Option |_. Description |_. Value |_. Default |_. Modifiable |
| buffer-size | Buffers graph mutations locally up to the specified number before persisting them against the storage backend. Set to 0 to disable buffering. Buffering is disabled automatically if the storage backend does not support buffered mutations. | non-negative integer | 1024 | yes |
| flush-ids | If flush ids is enabled, vertices and edges are assigned ids immediately upon creation. If not, then ids are only assigned when the transaction is committed. | _true_ or _false_ | _false_ | yes |

h2. Distributed Locking and ID Management Configuration



h2. Attribute and Serializer Configuration




h2. Default Configuration                                                                             